import { EOL } from "os";
import { gql } from "graphql-tag";
import MagicString from "magic-string";
import { vitePluginGraphqlLoaderUniqueChecker, vitePluginGraphqlLoaderExtractQuery, } from "./snippets.js";
const DOC_NAME = "_gql_doc";
const expandImports = (source) => {
    const lines = source.split(/\r\n|\r|\n/);
    const importNames = new Set();
    const imports = [];
    const importAppends = [];
    lines.some((line) => {
        const result = line.match(/^#\s?import (.+)$/);
        if (result) {
            const [_, importFile] = result;
            let importName = "Import_" + importFile.replace(/[^a-z0-9]/gi, "_");
            while (importNames.has(importName)) {
                importName = importName + "_";
            }
            importNames.add(importName);
            imports.push(`import ${importName} from ${importFile};\n`);
            importAppends.push(`${DOC_NAME}.definitions = ${vitePluginGraphqlLoaderUniqueChecker.name}(${DOC_NAME}.definitions.concat(${importName}.definitions));\n`);
        }
        return line.length !== 0 && line[0] !== "#";
    });
    return { imports, importAppends };
};
export const vitePluginGraphqlLoader = (options) => {
    const graphqlRegex = /\.(?:gql|graphql)$/;
    return {
        name: "graphql-loader",
        enforce: "pre",
        transform(source, id) {
            if (!graphqlRegex.test(id)) {
                return;
            }
            let documentNode;
            try {
                documentNode = gql `
                    ${source}
                `;
            }
            catch (error) {
                throw new Error(String(error));
            }
            let outputCode = new MagicString(source).replaceAll("`", "\\`");
            outputCode.prepend(`const _gql_source = \``);
            outputCode.append(`\`;\n`);
            const plainDocument = Object.assign({}, documentNode);
            Object.assign(plainDocument.loc, documentNode.loc);
            const documentObject = JSON.parse(JSON.stringify(documentNode));
            const sourceBodyIdentifier = `_gql_uuid_${new Date().getTime()}`;
            if (documentNode.loc && documentNode.loc.source) {
                documentObject.loc.source = {
                    name: documentNode.loc.source.name,
                    locationOffset: documentNode.loc.source.locationOffset,
                    body: sourceBodyIdentifier,
                };
            }
            outputCode.append(`const ${DOC_NAME} = ${JSON.stringify(documentObject).replace(`"${sourceBodyIdentifier}"`, "_gql_source")};\n`);
            const { imports, importAppends } = expandImports(source);
            if (imports.length) {
                outputCode.prepend(imports.join(""));
                outputCode.append(`const ${vitePluginGraphqlLoaderUniqueChecker.name} = ${vitePluginGraphqlLoaderUniqueChecker.toString()};\n`);
                outputCode.append(importAppends.join(""));
            }
            const operationCount = documentNode.definitions.filter((op) => (op.kind === "OperationDefinition" ||
                op.kind === "FragmentDefinition") &&
                op.name).length;
            const queryNames = [];
            const fragmentNames = [];
            if (operationCount >= 1) {
                const extractQueries = operationCount > 1 || imports.length > 0;
                if (extractQueries) {
                    outputCode.append(`const ${vitePluginGraphqlLoaderExtractQuery.name} = ${vitePluginGraphqlLoaderExtractQuery.toString()};\n`);
                }
                for (const op of documentNode.definitions) {
                    if (op.kind === "OperationDefinition" ||
                        op.kind === "FragmentDefinition") {
                        if (!op.name) {
                            if (operationCount > 1) {
                                throw new Error("Query/mutation names are required for a document with multiple definitions");
                            }
                            else {
                                continue;
                            }
                        }
                        const opName = op.name.value;
                        outputCode.append(`export const ${opName} = ${extractQueries ? `${vitePluginGraphqlLoaderExtractQuery.name}(${DOC_NAME}, "${opName}")` : DOC_NAME};\n`);
                        if (op.kind === "OperationDefinition") {
                            queryNames.push(opName);
                        }
                        else {
                            fragmentNames.push(opName);
                        }
                    }
                }
            }
            outputCode.append(`export const _queries = {${queryNames.join(",")}};\n`);
            outputCode.append(`export const _fragments = {${fragmentNames.join(",")}};\n`);
            outputCode.append(`export default ${DOC_NAME};\n`);
            outputCode.replaceAll("\n", EOL);
            return {
                code: outputCode.toString(),
                map: options?.noSourceMap
                    ? { mappings: "" }
                    : outputCode.generateMap(options?.sourceMapOptions),
            };
        },
    };
};
export default vitePluginGraphqlLoader;
//# sourceMappingURL=index.js.map